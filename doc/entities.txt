 
Entities
===============================

Entities are Python classes which store an object’s state in the database. Each instance of an entity corresponds to a row in the database table. Often entities represent objects from the real world (e.g. Customer, Product).

Pony also has an `entity-relationship diagram editor <https://editor.ponyorm.com>`_ which can be used for creating Python entity definitions.

Before creating entity instances you need to map entities to database tables. Pony can map entities to existing tables or create new tables. After the mapping is generated you can query the database and create new instances of entities.


Defining an entity
-------------------------------------

Each entity belongs to a database. That is why before defining entities you need to create an object of the ``Database`` class::

    from pony.orm import *

    db = Database("sqlite", "database.sqlite", create_db=True)

    class MyEntity(db.Entity):
        attr1 = Required(unicode)

The Pony’s Database object has the ``Entity`` attribute which is used as a base class for all the entities stored in this database. Each new entity that is defined must inherit from this ``Entity`` class.


Entity attributes
-----------------------------------

Entity attributes are specified as class attributes inside the entity class using the syntax ``attr_name = kind(type)``::

    class Customer(db.Entity):
        name = Required(unicode)
        picture = Optional(buffer)

You can also specify additional attribute options after the attribute type in the parentheses. We will discuss this in more detail later in this chapter.

Pony has the following kinds of attributes:

* Required
* Optional
* PrimaryKey
* Set

Required and Optional
~~~~~~~~~~~~~~~~~~~~~

Usually most entity attributes are of ``Required`` or ``Optional`` kind. If an attribute is defined as ``Required`` then it must have a value at all times, while ``Optional`` attributes may be empty.

If you need the value of an attribute to be unique then you can set the attribute option ``unique=True``.

Optional string attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For most data types ``None`` is used when no value is assigned to the attribute. But when a string attribute is not assigned a value, Pony uses an empty string instead of ``None``. This is more practical than storing empty string as ``NULL`` in the database. Most frameworks behave this way. Also, empty strings can be indexed for faster search, unlike NULLs. If you will try to assign ``None`` to such an optional string attribute, you’ll get the ``ConstraintError`` exception. You can change this behavior using the ``nullable=True`` option. In this case it will be possible to store both empty strings and ``NULL`` values in the same column, but this is rarely needed.

Oracle database treats empty strings as ``NULL`` values. Because of this all ``Optional`` attributes in Oracle have ``nullable`` set to ``True`` automatically.

If an optional string attribute is used as a unique key or as a part of a unique composite key, it will always have ``nullable`` set to ``True`` automatically.

PrimaryKey
~~~~~~~~~~~~~~~~~~~~~

``PrimaryKey`` defines an attribute which is used as a primary key in the database table. Each entity should always have a primary key. If the primary key is not specified explicitly, Pony will create it implicitly. Let’s consider the following example::

    class Product(db.Entity):
        name = Required(unicode, unique=True)
        price = Required(Decimal)
        description = Optional(unicode)

The entity definition above will be equal to the following::

    class Product(db.Entity):
        id = PrimaryKey(int, auto=True)
        name = Required(unicode, unique=True)
        price = Required(Decimal)
        description = Optional(unicode)

The primary key attribute which Pony adds automatically always will have the name ``id`` and ``int`` type. The option ``auto=True`` means that the value for this attribute will be assigned automatically using the database’s incremental counter or a sequence.

If you specify the primary key attribute yourself, it can have any name and type. For example, we can define the entity ``Customer`` and have customer’s email as the primary key::

    class Customer(db.Entity):
       email = PrimaryKey(unicode)
       name = Required(unicode)

Composite keys
~~~~~~~~~~~~~~~~~~~~~~~~

Pony fully supports composite keys. In order to declare a composite primary key you need to specify all the parts of the key as ``Required`` and then combine them into a composite primary key::

    class Example(db.Entity):
        a = Required(int)
        b = Required(unicode)
        PrimaryKey(a, b)

Here ``PrimaryKey(a, b)`` doesn’t create an attribute, but combines the attributes specified in the parenthesis into a composite primary key. Each entity can have only one primary key.

In order to declare a secondary composite key you need to declare attributes as usual and then combine them using the ``composite_key`` directive::

    class Example(db.Entity):
        a = Required(str)
        b = Optional(int)
        composite_key(a, b)

In the database ``composite_key(a, b)`` will be represented as the ``UNIQUE ("a", "b")`` constraint.

Set
~~~~~~~~~~~~~~~~~~~~~

A ``Set`` attribute represents a collection. You can specify another entity as the type for the ``Set`` attribute. This is the way to define one side for the to-many relationships, which can be many-to-many or one-to-many. 
As of now, Pony doesn’t allow the use of ``Set`` with primitive types. We plan to add this feature later. 



Attribute data types
--------------------------

Entity attributes are specified as class attributes inside the entity class using the syntax ``attr_name = kind(type)``. You can use the following data types when define attributes:

* unicode
* str
* int
* float
* Decimal
* datetime
* date
* bool
* buffer - used for binary data (stored as BLOB in the database)
* LongStr - used for large strings (stored as CLOB in the database)
* LongUnicode - used for large unicode strings (stored as CLOB in the database)
* UUID

Also you can specify another entity as the attribute type for defining a relationship between two entities.


Attribute options
----------------------------------------------------------------

You can specify additional options during attribute definitions using positional and keyword arguments. Positional arguments depend on the attribute type.

String types accept a positional argument which specifies the max length of this column in the database::

    name = Required(unicode, 40)   #  VARCHAR(40)

For the Decimal type you can specify precision and scale::

    price = Required(Decimal, 10, 2)   #  DECIMAL(10, 2)

The ``datetime`` and ``time`` types accept a positional argument which specifies the column's precision. By default it is equal to 6 for most databases.

For MySQL database the default value is 0. Before the MySQL version 5.6.4, the ``DATETIME`` and ``TIME`` columns were `unable to store fractional seconds <http://dev.mysql.com/doc/refman/5.6/en/fractional-seconds.html>`_ at all. Starting with the version 5.6.4, you can store fractional seconds if you set the precision equal to 6 during the attribute definition::

    dt = Required(datetime, 6)

Additional attribute options which can be set as keyword arguments:

.. py:attribute:: unique

   Boolean value to determine if the value of the attribute should be unique.

.. py:attribute:: auto
   
   Boolean value, can be used for a PrimaryKey attribute only. If ``auto=True`` then the value for this attribute will be assigned automatically using the database’s incremental counter or sequence.

.. py:attribute:: default 

   Allows you to specify a default value for the attribute.

.. py:attribute:: sql_default

   This option allows you to specify default SQL text which will be included to the CREATE TABLE SQL command. For example::

       created_at = Required(datetime, sql_default='CURRENT_TIMESTAMP')

   Specifying ``sql_default=True`` can be convenient when you have a ``Required`` attribute and the value for it is going to be calculated in the database during the INSERT command (e.g. by a trigger). ``None`` by default.

.. py:attribute:: index 

   Allows you to control index creation for this column. ``index=True`` - the index will be created with the default name. ``index='index_name'`` - create index with the specified name. ``index=False`` – skip index creation. If no 'index' option is specified then Pony still creates index for foreign keys using the default name. 

.. py:attribute:: sql_type 

   Use this option if you want to set a specific SQL type for the column. 

.. py:attribute:: lazy

   Boolean value, defers loading of the attribute while loading the object. ``True`` means this attribute will not be loaded until you try to access this attribute directly. By default ``lazy`` is set to ``True`` for ``LongStr`` and ``LongUnicode`` and to ``False`` for all other types.

.. _attribute_cascade_delete_ref:

.. py:attribute:: cascade_delete

   Boolean value which controls the cascade deletion of related objects. ``True`` means that Pony always does cascade delete even if the other side is defined as ``Optional``. ``False`` means that Pony never does cascade delete for this relationship. If the relationship is defined as ``Required`` at the other end and ``cascade_delete=False`` then Pony raises the ``ConstraintError`` exception on deletion attempt.

.. py:attribute:: column

   Specifies the name of the column in the database table which is used for mapping.

.. py:attribute:: columns

   Specifies a list of column names in the database table which are used for mapping a composite attribute.

.. py:attribute:: reverse

   Specifies the attribute at the other end which should be used for the relationship.

.. py:attribute:: reverse_column

   Used for a symmetric relationship in order to specify the name of the database column for the intermediate table.

.. py:attribute:: reverse_columns

   Used for a symmetric relationship if the entity has a composite primary key. Allows you to specify the name of the database columns for the intermediate table. 

.. py:attribute:: table

   Can be used for many-to-many relationship only in order to specify the name of the intermediate table.

.. py:attribute:: nullable 

   Boolean value. ``True`` allows the column to be ``NULL`` in the database. Most likely you don't need to specify this option because Pony sets it to the most appropriate value by default.

.. py:attribute:: volatile

   Usually you specify the value of the attribute in Python and Pony stores this value in the database. But sometimes you might want to have some logic in the database which changes the value for a column. For example, you can have a trigger in the database which updates the timestamp of the last object's modification. In this case you want to have Pony to forget the value of the attribute on object's update sent to the database and read it from the database at the next access attempt. Set ``volatile=True`` in order to let Pony know that this attribute can be changed in the database.

   The ``volatile=True`` option can be combined with the ``sql_default=True`` option if the value for this attribute is going to be both created and updated by the database.

   You can get the exception ``UnrepeatableReadError: Value ... was updated outside of current transaction`` if another transaction changes the value of the attribute which is used in the current transaction. Pony notifies about it because this situation can break the business logic of the application. If you don't want Pony to protect you from such concurrent modifications you can set ``volatile=True`` for an attribute.

.. py:attribute:: sequence_name

   Allows you to specify the sequence name used for ``PrimaryKey`` attributes for Oracle database.


Entity inheritance
----------------------

Entity inheritance in Pony is similar to inheritance for regular Python classes. Let’s consider an example of a data diagram where entities ``Student`` and ``Professor`` inherit from the entity ``Person``::

    class Person(db.Entity):
        name = Required(unicode)

    class Student(Person):
        gpa = Optional(Decimal)
        mentor = Optional("Professor")

    class Professor(Person):
        degree = Required(unicode)
        students = Set("Student")

All attributes and relationships of the base entity ``Person`` are inherited by all descendants.
Some mappers (e.g. Django) have a problem when a query on a base entity doesn’t return the right classes: for instances of derived models the query returns just a base part of each instance. Pony doesn’t have such a problem, you always get the correct entity instances:

.. code-block:: python

    for p in Person.select():
        if isinstance(p, Professor):
            print p.name, p.degree
        elif isinstance(p, Student):
            print p.name, p.gpa
        else:  # somebody else
            print p.name

In order to create the correct entity instance Pony uses a discriminator column. By default this is a string column and Pony uses it to store the entity class name::

    classtype = Discriminator(str)

By default Pony implicitly creates the ``classtype`` attribute for each entity class which takes part in inheritance. You can use your own discriminator column name and type. If you change the type of the discriminator column, then you have to specify the ``_discrimintator_`` value for each entity.
Let’s consider the example above and use ``cls_id`` as the name for our discriminator column of ``int`` type::

    class Person(db.Entity):
        cls_id = Discriminator(int)
        _discriminator_ = 1
        ...

    class Student(Person):
        _discriminator_ = 2
        ...

    class Professor(Person):
        _discriminator_ = 3
        ...


Multiple inheritance
~~~~~~~~~~~~~~~~~~~~~~~~~

Pony also supports multiple inheritance. If you use multiple inheritance then all the parent classes of the newly defined class should inherit from the same base class (a "diamond-like" hierarchy).

Let’s consider a data diagram example where a student can be a teaching assistant. For this purpose we’ll introduce the entity ``Teacher`` and derive ``Professor`` and ``TeachingAssistant`` from it. The entity ``TeachingAssistant`` inherits from both the ``Student`` class and the ``Teacher`` class::

    class Person(db.Entity):
        name = Required(unicode)

    class Student(Person):
        ...

    class Teacher(Person):
        ...

    class Professor(Teacher):
        ...

    class TeachingAssistant(Student, Teacher):
        ...

The ``TeachingAssistant`` objects are instances of both ``Teacher`` and ``Student`` entities and inherit all their attributes. Multiple inheritance is possible here because both ``Teacher`` and ``Student`` have the same base class ``Person``.

Inheritance is a very powerful tool, but it should be used wisely. Often the data diagram is much simpler if it has limited usage of inheritance.


Representing inheritance in the database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There are three ways to implement inheritance in the database:

1. Single Table Inheritance: all entities in the hierarchy are mapped to a single database table.
2. Class Table Inheritance: each entity in the hierarchy is mapped to a separate table, but each table stores only the attributes which the entity doesn’t inherit from its parents.
3. Concrete Table Inheritance: each entity in the hierarchy is mapped to a separate table and each table stores the attributes of the entity and all its ancestors.

The main problem of the third approach is that there is no single table where we can store the primary key and that is why this implementation is rarely used.

The second implementation is used often, this is how the inheritance is implemented in Django. The disadvantage of this approach is that the mapper has to join several tables together in order to retrieve data which can lead to the performance degradation.

Pony uses the first approach where all entities in the hierarchy are mapped to a single database table. This is the most efficient implementation because there is no need to join tables. This approach has its disadvantages too:

* Each table row has columns which are not used because they belong to other entities in the hierarchy. It is not a big problem because the blank columns keep ``NULL`` values and it doesn’t use much space.
* The table can have large number of columns if there are a lot of entities in the hierarchy. Different databases have different limits for maximum columns per table, but usually that limit is pretty high.

The second approach has the following advantage: when a new entity is added to the hierarchy, there is no need to change the base class table. Pony is going to support this approach in the future.


.. _mapping_customization:

Mapping customization
-----------------------------------------------

When Pony creates tables from entity definitions, it uses the name of entity as the table name and attribute names as the column names, but you can override this behavior.

The name of the table is not always equal to the name of an entity: in MySQL and PostgreSQL the default table name generated from the entity name will be converted to the lower case, in Oracle - to the upper case. You can always find the name of the entity table by reading the ``_table_`` attribute of an entity class.

If you need to set your own table name use the ``_table_`` class attribute::

    class Person(db.Entity):
        _table_ = "person_table"
        name = Required(unicode)

If you need to set your own column name, use the option ``column``::

    class Person(db.Entity):
        _table_ = "person_table"
        name = Required(unicode, column="person_name")


For composite attributes use the option ``columns`` with the list of the column names specified::

    class Course(db.Entity):
        name = Required(unicode)
        semester = Required(int)
        lectures = Set("Lecture")
        PrimaryKey(name, semester)

    class Lecture(db.Entity):
        date = Required(datetime)
        course = Required(Course, columns=["name_of_course", "semester"])

In this example we override the column names for the composite attribute ``Lecture.course``. By default Pony will generate the following column names: ``"course_name"`` and ``"course_semester"``. Pony combines the entity name and the attribute name in order to make the column names easy to understand for the programmer.

If you need to set the column names for the intermediate table for many-to-many relationship, you should specify the option ``column`` or ``columns`` for the ``Set`` attributes. Let’s consider the following example::

    from pony.orm import *

    db = Database("sqlite", ":memory:")

    class Student(db.Entity):
        name = Required(unicode)
        courses = Set("Course")

    class Course(db.Entity):
        name = Required(unicode)
        semester = Required(int)
        students = Set(Student)
        PrimaryKey(name, semester)

    sql_debug(True)
    db.generate_mapping(create_tables=True)

By default, for storing many-to-many relationships between ``Student`` and ``Course``, Pony will create an intermediate table ``"Course_Student"`` (it constructs the name of the intermediate table from the entity names in the alphabetical order). This table will have three columns: ``"course_name"``, ``"course_semester"`` and ``"student"`` - two columns for the ``Course``’s composite primary key and one column for the ``Student``. Now let’s say we want to name the intermediate table as ``"Study_Plans"`` which have the following columns: ``"course"``, ``"semester"`` and ``"student_id"``. Below is the code snippet which does this:

.. code-block:: python

    class Student(db.Entity):
        name = Required(unicode)
        courses = Set("Course", table="Study_Plans", columns=["course", "semester"]))

    class Course(db.Entity):
        name = Required(unicode)
        semester = Required(int)
        students = Set(Student, column="student_id")
        PrimaryKey(name, semester)

You can find more examples of mapping customization in `an example which comes with Pony ORM package <https://github.com/ponyorm/pony/blob/orm/pony/orm/examples/university.py>`_



Serializing entity instances
-------------------------------------------

Pony allows pickling entity instances, query results and collections. You might want to use it if you want to cache entity instances in an external cache (e.g. memcache). When Pony pickles entities it saves all attributes except collections in order to avoid pickling a large set of data. If you need to pickle a collection attribute, you must pickle it separately.